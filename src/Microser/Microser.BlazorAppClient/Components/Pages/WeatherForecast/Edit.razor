@page "/WeatherForecast/Edit/{id:int}"

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>
<h4>WeatherForecast</h4>
<hr />
@if (weatherForecast == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">

            <EditForm Model="@weatherForecast" OnValidSubmit="@HandleValidSubmit" Context="editWeatherForecast">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group">
                    <label class="control-label">@nameof(WeatherForecast.Date)</label>
                    <InputDate @bind-Value="weatherForecast.Date" class="form-control" />
                    <ValidationMessage For="@(() => weatherForecast.Date)" class="text-danger" />
                </div>
                <div class="form-group">
                    <label class="control-label">@nameof(WeatherForecast.TemperatureC)</label>
                    <InputNumber @bind-Value="weatherForecast.TemperatureC" class="form-control" />
                    <ValidationMessage For="@(() => weatherForecast.TemperatureC)" class="text-danger" />
                </div>
                <div class="form-group">
                    <label class="control-label">@nameof(WeatherForecast.Summary)</label>
                    <InputText @bind-Value="weatherForecast.Summary" class="form-control" />
                    <ValidationMessage For="@(() => weatherForecast.Summary)" class="text-danger" />
                </div>

                <div class="form-group">
                    <input type="submit" value="Save" class="btn btn-primary" />
                </div>


            </EditForm>

        </div>
    </div>

    <div>
        <a href="/WeatherForecast">Back to List</a>
    </div>

}

@code {

    [Parameter]
    public int id { get; set; }

    private WeatherForecast? weatherForecast;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (weatherForecast == null)
                weatherForecast = await WeatherForecastApiService.GetByIdAsync(id);
        }
        catch (Exception)
        {
            NavigationManager.Refresh(forceReload: true);
        }
    }

    private async void HandleValidSubmit()
    {
        if (weatherForecast is null) return;

        var result = await WeatherForecastApiService.UpdateAsync(id, weatherForecast);
        if (result)
            NavigationManager.NavigateTo("/WeatherForecast");
    }

}
