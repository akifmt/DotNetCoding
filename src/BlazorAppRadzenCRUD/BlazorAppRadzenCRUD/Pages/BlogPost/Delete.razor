@page "/BlogPost/Delete/{id:int}"

@using AutoMapper
@using BlazorAppRadzenCRUD.Data;
@using BlazorAppRadzenCRUD.Models;
@using BlazorAppRadzenCRUD.Services;

@inject IMapper Mapper
@inject BlogPostService BlogPostService
@inject NavigationManager NavigationManager

<h3>Delete</h3>

@if (blogPostViewModel == null)
{
    <p>Loading...</p>
}
else
{

    <RadzenStack>
        <RadzenFieldset Text="Post Delete">
            <RadzenStack>

                <RadzenRow AlignItems="AlignItems.Center" Class="rz-mb-2">
                    <RadzenColumn SizeSM="12" SizeMD="2" SizeLG="2">
                        <RadzenLabel Text="Id" for="id" />
                    </RadzenColumn>
                    <RadzenColumn SizeSM="12" SizeMD="10" SizeLG="10">
                        <RadzenTextBox id="id" class="form-control" placeholder="Id" ReadOnly=true
                                       Value="@blogPostViewModel.Id.ToString()" />
                    </RadzenColumn>
                </RadzenRow>

                <RadzenRow AlignItems="AlignItems.Center" Class="rz-mb-2">
                    <RadzenColumn SizeSM="12" SizeMD="2" SizeLG="2">
                        <RadzenLabel Text="Title" for="title" />
                    </RadzenColumn>
                    <RadzenColumn SizeSM="12" SizeMD="10" SizeLG="10">
                        <RadzenTextBox id="title" class="form-control" placeholder="Title" ReadOnly=true
                                       Value="@blogPostViewModel.Title" />
                    </RadzenColumn>
                </RadzenRow>

            </RadzenStack>

            <RadzenButton Text="REMOVE" Icon="delete_forever" ButtonStyle="ButtonStyle.Danger"
                          Click="RemoveButtonClick" />

        </RadzenFieldset>
    </RadzenStack>

    <RadzenButton Text="Back" Icon="arrow_back" Class="rz-mt-2"
                  Click="NavigatetoBlogPostIndex"
                  ButtonStyle="ButtonStyle.Primary" />








}

@code {

    [Parameter]
    public int id { get; set; }

    BlogPostViewModel? blogPostViewModel;

    protected override async Task OnInitializedAsync()
    {
        if (blogPostViewModel == null)
        {
            var blogPost = await BlogPostService.GetbyId(id);
            if (blogPost == null)
                return;

            blogPostViewModel = Mapper.Map<BlogPost, BlogPostViewModel>(blogPost);
        }
    }

    private async void RemoveButtonClick()
    {
        bool result = await BlogPostService.DeletebyIdAsync(id);
        if (result)
            NavigationManager.NavigateTo("/BlogPost");
    }

    private void NavigatetoBlogPostIndex() => NavigationManager.NavigateTo("/BlogPost");

}
