@page "/ReCAPTCHAv2"

@using BlazorAppreCAPTCHAv2.Data;
@using BlazorAppreCAPTCHAv2.ViewModels;
@using BlazorAppreCAPTCHAv2.Components;

@inject IJSRuntime JSRuntime
@inject GooglereCAPTCHAv2Service GooglereCAPTCHAv2Service

<PageTitle>reCAPTCHAv2</PageTitle>

<EditForm Model="@blogPostViewModel" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label class="control-label">@nameof(BlogPostViewModel.Title)</label>
        <InputText @bind-Value="blogPostViewModel.Title" class="form-control" />
        <ValidationMessage For="@(() => blogPostViewModel.Title)" class="text-danger" />
    </div>

    <div class="form-group mt-3">
        <label class="control-label">@nameof(BlogPostViewModel.Content)</label>
        <InputText @bind-Value="blogPostViewModel.Content" class="form-control" />
        <ValidationMessage For="@(() => blogPostViewModel.Content)" class="text-danger" />
    </div>

    <div class="mt-3">
        <ReCAPTCHAv2Component @ref="reCAPTCHAv2Component" SiteKey="@GooglereCAPTCHAv2Settings.SiteKey" OnSuccess="OnSuccess" OnExpired="OnExpired" />
    </div>

    <div class="form-group mt-3">
        <input type="submit" value="Send" disabled="@DisablePostButton" class="btn btn-primary" />
    </div>

</EditForm>


<div class="form-group mt-3">
    <label class="control-label text-primary"><strong>
            Result: @resultMessage
    </strong></label>
</div>


@code {
    BlogPostViewModel? blogPostViewModel;

    private ReCAPTCHAv2Component? reCAPTCHAv2Component;

    private bool ValidReCAPTCHA = false;

    private bool DisablePostButton => !ValidReCAPTCHA;

    private void OnSuccess() => ValidReCAPTCHA = true;

    private void OnExpired() => ValidReCAPTCHA = false;

    private string resultMessage = "";

    protected override void OnInitialized()
    {
        blogPostViewModel = new();
    }

    private async Task HandleValidSubmit()
    {
        // verify ReCAPTCHAv2
        bool verifiedResult = await CheckReCAPTCHA();
        if (!verifiedResult)
            return;

        // verified actions
        resultMessage = "Success...";
        StateHasChanged();
    }

    private async Task<bool> CheckReCAPTCHA()
    {
        bool serverVerified = false;
        if (ValidReCAPTCHA)
        {
            var response = await reCAPTCHAv2Component.GetResponseAsync();
            try
            {
                StateHasChanged();
                var result = await GooglereCAPTCHAv2Service.Post(response);
                if (result.Success)
                {
                    serverVerified = true;
                }
                else
                {
                    await JSRuntime.InvokeAsync<object>("alert", string.Join(", ", result.ErrorCodes));
                    serverVerified = false;
                    StateHasChanged();
                }
            }
            catch (HttpRequestException e)
            {
                await JSRuntime.InvokeAsync<object>("alert", e.Message);
                serverVerified = false;
                StateHasChanged();
            }
        }
        return serverVerified;
    }

}

